<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                   
                </h5>                
            </div>
            
            <div class="modal-body">
                <EditForm Model="@newActivityDTO" OnValidSubmit="(async () => await HandleNewActivity())" @ref="Form">
                    <DataAnnotationsValidator />

                    <label for="Value">Value:</label>
                    <InputNumber id="Value" @bind-Value="newActivityDTO.Value" class="form-control" placeholder="Name" />
                    <ValidationMessage For="@(() => newActivityDTO.Value)"></ValidationMessage>

                    <label for="Description">Description:</label>
                    <InputText id="Description" @bind-Value="newActivityDTO.Description" class="form-control" placeholder="Name" />
                    <ValidationMessage For="@(() => newActivityDTO.Description)"></ValidationMessage>

                    <InputDate id="Date" @bind-Value=newActivityDTO.ActivityDate class="form-control"></InputDate>

                    <button type="submit" class="btn btn-primary">Save changes</button>
                </EditForm>
            </div>
            <div class="modal-footer">                
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button>
            </div>            
        </div>
    </div>
</div>


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {
    public CategoryDTO Category { get; set; }

    [Parameter]
    public EventCallback<ActivityDTO> onClickAddActivity { get; set; }
    public ActivityDTO newActivityDTO = new ActivityDTO() { ActivityDate = DateTime.Now };

    private EditForm? Form { get; set; }

    public async Task HandleNewActivity()
    {
        newActivityDTO.CategoryId = Category.Id;
        await onClickAddActivity.InvokeAsync(newActivityDTO);
        newActivityDTO = new ActivityDTO();
    }

    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    public void Open(CategoryDTO category)
    {
        Category = category;
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }
}